# Configuration file

Chimney {

    CraftingRecipe {

        main {
            # Amount of output units. [range: 1 ~ 64, default: 8]
            I:amount=8

            # Recipe components list.
            # Components should be represented by its ids.
            # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
            # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
            # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
            # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
            # Use '*' char as meta value to specify all possible values.
            # Also you may use just ore dictionary name as full id.
            #  [default: [red_nether_brick]]
            S:components <
                red_nether_brick
             >

            # Output unit id.
            # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
            # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
            # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
            # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
            # Use '*' char as meta value to specify all possible values.
            # Also you may use just ore dictionary name as full id.
            #  [default: adchimneys:red_nether_brick]
            S:output=adchimneys:red_nether_brick

            # Shaped recipe pattern in format <nn nn> or <nnn nnn nnn>.
            # Where 'n' - number of recipe component (from 1 to 9).
            # Zero value (0) is for empty slot.
            # If pattern is empty, then recipe will be treated as shapeless. [default: 101 101 101]
            S:pattern=101 101 101
        }

    }

}


Conductor {

    CraftingRecipe {

        main {
            # Amount of output units. [range: 1 ~ 64, default: 4]
            I:amount=4

            # Recipe components list.
            # Components should be represented by its ids.
            # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
            # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
            # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
            # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
            # Use '*' char as meta value to specify all possible values.
            # Also you may use just ore dictionary name as full id.
            #  [default: [adchimneys:red_nether_brick]]
            S:components <
                adchimneys:red_nether_brick
             >

            # Output unit id.
            # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
            # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
            # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
            # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
            # Use '*' char as meta value to specify all possible values.
            # Also you may use just ore dictionary name as full id.
            #  [default: adchimneys:red_nether_brick:1]
            S:output=adchimneys:red_nether_brick:1

            # Shaped recipe pattern in format <nn nn> or <nnn nnn nnn>.
            # Where 'n' - number of recipe component (from 1 to 9).
            # Zero value (0) is for empty slot.
            # If pattern is empty, then recipe will be treated as shapeless. [default: 101 000 101]
            S:pattern=101 000 101
        }

    }

}


Container {
    # Defines a color in ARGB (Alpha, Red, Green, Blue) hex format (0xaarrggbb) which will be applied to the smoke.
    # The alpha channel of this color (aa) determines probability of applying (ff - always, 7f - 1/2, 00 - never).
    #  [default: 0x11360203]
    S:color=0x11360203

    # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
    # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
    # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
    # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
    # Use '*' char as meta value to specify all possible values.
    # Also you may use just ore dictionary name as full id.
    #  [default: red_nether_brick]
    S:relatedBlockId=red_nether_brick
}


Emitter {
    # If true, the smoke will be transferred to the chimneys directly connected from aside. [default: true]
    B:canEmitAside=true

    # Defines a color in ARGB (Alpha, Red, Green, Blue) hex format (0xaarrggbb) which will be applied to the smoke.
    # The alpha channel of this color (aa) determines probability of applying (ff - always, 7f - 1/2, 00 - never).
    #  [default: 0x11360203]
    S:color=0x11360203

    # If true, the smoke particles will be generated even without connected chimney. [default: true]
    B:emitWithoutChimney=true

    # Defines the key name of NBT tag that needs to be checked.
    # Smoke from this emitter will be gotten only if the returning value is > 0 or true.
    # Set empty string for no checks [default: ]
    S:nbtControlKey=

    # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
    # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
    # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
    # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
    # Use '*' char as meta value to specify all possible values.
    # Also you may use just ore dictionary name as full id.
    #  [default: adchimneys:red_nether_brick:2]
    S:relatedBlockId=adchimneys:red_nether_brick:2

    # If true, the meta data of the dropped item will be used instead of the block state meta.
    # This is usefull when the placed block has other meta than its item. [default: false]
    B:useDroppedItemMeta=false

    CraftingRecipe {

        main {
            # Amount of output units. [range: 1 ~ 64, default: 4]
            I:amount=4

            # Recipe components list.
            # Components should be represented by its ids.
            # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
            # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
            # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
            # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
            # Use '*' char as meta value to specify all possible values.
            # Also you may use just ore dictionary name as full id.
            #  [default: [adchimneys:red_nether_brick:1], [repeater], [comparator]]
            S:components <
                adchimneys:red_nether_brick:1
                repeater
                comparator
             >

            # Output unit id.
            # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
            # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
            # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
            # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
            # Use '*' char as meta value to specify all possible values.
            # Also you may use just ore dictionary name as full id.
            #  [default: adchimneys:red_nether_brick:2]
            S:output=adchimneys:red_nether_brick:2

            # Shaped recipe pattern in format <nn nn> or <nnn nnn nnn>.
            # Where 'n' - number of recipe component (from 1 to 9).
            # Zero value (0) is for empty slot.
            # If pattern is empty, then recipe will be treated as shapeless. [default: 121 232 121]
            S:pattern=121 232 121
        }

    }

}


Smoke {
    # Defines particles amount [range: 0.0 ~ 16.0, default: 4.0]
    S:amount=4.0

    # Defines smoke blow out distance. [range: 0.0 ~ 4.0, default: 1.0]
    S:intencity=1.0

    # Defines smoke particles scale. [range: 1.0 ~ 2.5, default: 2.0]
    S:scale=2.0
}


brickNetherRed {
    # Set to 'false' if you don't need this unit. [default: true]
    B:enabled=true
    S:hardness=2.0
    S:resistance=30.0
}


